//
//  ExploreView.swift
//  JoinexDemo 1.0
//
//  Created by Molin Liu on 2025/7/26.
//

import SwiftUI

struct ExploreView: View {
    @Binding var selectedTab: Int
    @EnvironmentObject var authManager: AuthManager
    @State private var searchText = ""
    @State private var navigateToEventDetail = false
    @State private var selectedEvent: Event? = nil
    @State private var selectedDistance = 10
    @State private var showLocationSheet = false
    @State private var showSportSheet = false
    @State private var locationText = "Surrey, British Columbia"
    @State private var radius = 40
    @State private var showFilters = false
    @State private var isSearching = false
    @State private var isFiltering = false
    @State private var searchDebounceTimer: Timer?
    @State private var isRefreshing = false    
    // Filter Services
    @StateObject private var sportFilterService = SportFilterService()
    @StateObject private var dateFilterService = DateFilterService()
    @StateObject private var locationFilterService = LocationFilterService()
    @StateObject private var realTimeSearchService = RealTimeSearchService()
    
    // Updated comprehensive sports list
    let sports = [
        "All Sports",
        "General (Casual/Any)",
        "Badminton",
        "Basketball",
        "Soccer (Football)",
        "Volleyball",
        "Table Tennis",
        "Tennis",
        "Pickleball",
        "Baseball",
        "Softball",
        "Running",
        "Cycling",
        "Swimming",
        "Climbing (Indoor/Outdoor)",
        "Skating (Ice/Roller)",
        "Skiing/Snowboarding",
        "Golf",
        "Ultimate Frisbee",
        "Flag Football",
        "Martial Arts (e.g., Judo, Taekwondo)",
        "Boxing",
        "Wrestling",
        "Dance Fitness (Zumba, Hip-Hop, etc.)",
        "Yoga/Pilates",
        "CrossFit/HIIT/Bootcamp",
        "Esports/Gaming Tournaments",
        "Dodgeball",
        "Cricket",
        "Rugby",
        "Lacrosse",
        "Hockey (Field/Ice)",
        "Surfing",
        "Archery",
        "Rowing",
        "Bouldering",
        "Kendo/Fencing",
        "Cheerleading",
        "Horseback Riding"
    ]
    
    let distances = [1, 5, 10, 25, 40, 50] // km
    // Date labels for next 7 days
    let dateLabels: [String] = {
        let calendar = Calendar.current
        let today = Date()
        let formatter = DateFormatter()
        formatter.dateFormat = "E"
        return (0..<7).map { offset in
            let date = calendar.date(byAdding: .day, value: offset, to: today) ?? today
            if offset == 0 { return "Today" }
            if offset == 1 { return "Tue" }
            return formatter.string(from: date)
        }
    }()
    let dateNumbers: [String] = {
        let calendar = Calendar.current
        let today = Date()
        let formatter = DateFormatter()
        formatter.dateFormat = "dd"
        return (0..<7).map { offset in
            let date = calendar.date(byAdding: .day, value: offset, to: today) ?? today
            return formatter.string(from: date)
        }
    }()
    
    var body: some View {
        NavigationStack {
            ZStack {
                Color.white
                    .ignoresSafeArea(.all, edges: .top)
                
                VStack(spacing: 0) {
                    // Header
                    ZStack {
                        HStack {
                            Image("logo1")
                                .resizable()
                                .aspectRatio(contentMode: .fit)
                                .frame(width: 20, height: 20)
                            
                            Text("Explore")
                                .font(.system(size: 16, weight: .bold, design: .default))
                                .foregroundColor(.black)
                            
                            Spacer()
                            
                            // Notification bell
                            
                            // Refresh button
                                Task {
                                    isRefreshing = true
                                    await authManager.refreshAllEventLists()
                                    isRefreshing = false
                                }
                            }) {
                                if isRefreshing {
                                    ProgressView()
                                        .scaleEffect(0.8)
                                        .foregroundColor(.royalBlue)
                                } else {
                                    Image(systemName: "arrow.clockwise")
                                        .font(.title2)
                                        .foregroundColor(.royalBlue)
                                }
                            }                            }
                            Button(action: {
                                // Handle notifications
                            }) {
                                Image(systemName: "bell")
                                    .font(.title2)
                                    .foregroundColor(.black)
                            }
                            
                            // Profile picture
                            Button(action: {
                                selectedTab = 4
                            }) {
                                if let urlString = authManager.profile?.avatar_url, let url = URL(string: urlString) {
                                    AsyncImage(url: url) { image in
                                        image
                                            .resizable()
                                            .scaledToFill()
                                            .frame(width: 32, height: 32)
                                            .clipShape(Circle())
                                    } placeholder: {
                                        Circle()
                                            .fill(Color.royalBlue)
                                            .frame(width: 32, height: 32)
                                            .overlay(
                                                Text(String(authManager.profile?.username.prefix(1) ?? "U"))
                                                    .font(.system(size: 12, weight: .bold, design: .default))
                                                    .foregroundColor(.white)
                                            )
                                    }
                                } else {
                                    Circle()
                                        .fill(Color.royalBlue)
                                        .frame(width: 32, height: 32)
                                        .overlay(
                                            Text(String(authManager.profile?.username.prefix(1) ?? "U"))
                                                .font(.system(size: 12, weight: .bold, design: .default))
                                                .foregroundColor(.white)
                                        )
                                }
                            }
                        }
                    }
                    .padding(.horizontal, 20)
                    .padding(.top, 10)
                    
                    // Search and Filter Section
                    VStack(spacing: 16) {
                        // Search Bar
                        HStack {
                            Image(systemName: "magnifyingglass")
                                .foregroundColor(.gray)
                                .font(.system(size: 16))
                            
                            TextField("Search events...", text: $searchText)
                                .font(.system(size: 16, weight: .regular, design: .default))
                                .onChange(of: searchText) { _, newValue in
                                    // Debounce search
                                    searchDebounceTimer?.invalidate()
                                    searchDebounceTimer = Timer.scheduledTimer(withTimeInterval: 0.5, repeats: false) { _ in
                                        Task {
                                            await performSearch()
                                        }
                                    }
                                }
                            
                            if !searchText.isEmpty {
                                Button(action: {
                                    searchText = ""
                                    Task {
                                        await authManager.refreshAllEventLists()
                                    }
                                }) {
                                    Image(systemName: "xmark.circle.fill")
                                        .foregroundColor(.gray)
                                        .font(.system(size: 16))
                                }
                            }
                        }
                        .padding(.horizontal, 16)
                        .padding(.vertical, 12)
                        .background(Color.gray.opacity(0.1))
                        .cornerRadius(12)
                        
                        // Filter Button and Dropdown
                        VStack(spacing: 0) {
                            // Filter Button
                            Button(action: {
                                withAnimation(.easeInOut(duration: 0.3)) {
                                    showFilters.toggle()
                                }
                            }) {
                                HStack {
                                    Image(systemName: "line.3.horizontal.decrease.circle")
                                        .foregroundColor(.royalBlue)
                                        .font(.system(size: 16))
                                    
                                    Text("Filters")
                                        .font(.system(size: 16, weight: .medium, design: .default))
                                        .foregroundColor(.royalBlue)
                                    
                                    Spacer()
                                    
                                                       // Active filters indicator
                   HStack(spacing: 4) {
                       if sportFilterService.selectedSport != "All Sports" {
                           Circle()
                               .fill(Color.royalBlue)
                               .frame(width: 6, height: 6)
                       }
                       if dateFilterService.isDateFilterActive {
                           Circle()
                               .fill(Color.royalBlue)
                               .frame(width: 6, height: 6)
                       }
                       if locationText != "Surrey, British Columbia" {
                           Circle()
                               .fill(Color.royalBlue)
                               .frame(width: 6, height: 6)
                       }
                   }
                                    
                                    Image(systemName: showFilters ? "chevron.up" : "chevron.down")
                                        .foregroundColor(.royalBlue)
                                        .font(.system(size: 12))
                                        .rotationEffect(.degrees(showFilters ? 180 : 0))
                                }
                                .padding(.horizontal, 16)
                                .padding(.vertical, 12)
                                .background(Color.white)
                                .cornerRadius(12)
                                .overlay(
                                    RoundedRectangle(cornerRadius: 12)
                                        .stroke(Color.gray.opacity(0.2), lineWidth: 1)
                                )
                            }
                            
                            // Filter Dropdown
                            if showFilters {
                                VStack(spacing: 16) {
                                    // Sport Filter
                                    VStack(alignment: .leading, spacing: 8) {
                                        Text("Sport Type")
                                            .font(.system(size: 14, weight: .medium, design: .default))
                                            .foregroundColor(.black)
                                        
                                        Button(action: {
                                            showSportSheet = true
                                        }) {
                                            HStack {
                                                Image(systemName: "sportscourt")
                                                    .foregroundColor(.royalBlue)
                                                    .font(.system(size: 14))
                                                
                                                VStack(alignment: .leading, spacing: 2) {
                                                    Text(sportFilterService.selectedSport)
                                                        .font(.system(size: 14, weight: .medium, design: .default))
                                                        .foregroundColor(.black)
                                                        .lineLimit(1)
                                                }
                                                
                                                Spacer()
                                                
                                                Image(systemName: "chevron.right")
                                                    .foregroundColor(.gray)
                                                    .font(.system(size: 12))
                                            }
                                            .padding(.horizontal, 12)
                                            .padding(.vertical, 8)
                                            .background(Color.gray.opacity(0.1))
                                            .cornerRadius(8)
                                        }
                                        .buttonStyle(PlainButtonStyle())
                                    }
                                    
                                    // Date Filter
                                    VStack(alignment: .leading, spacing: 8) {
                                        Text("Date")
                                            .font(.system(size: 14, weight: .medium, design: .default))
                                            .foregroundColor(.black)
                                        
                                        ScrollView(.horizontal, showsIndicators: false) {
                                            HStack(spacing: 12) {
                                                ForEach(0..<5, id: \.self) { index in
                                                                            Button(action: {
                            dateFilterService.selectDateOption(index)
                            Task {
                                await filterByDate(index)
                            }
                        }) {
                                                        VStack(spacing: 4) {
                                                            Text(dateLabels[index])
                                                                .font(.system(size: 12, weight: .medium, design: .default))
                                                                .foregroundColor(dateFilterService.selectedDateIndex == index ? .royalBlue : .gray)
                                                            
                                                            Text(dateNumbers[index])
                                                                .font(.system(size: 16, weight: .bold, design: .default))
                                                                .foregroundColor(dateFilterService.selectedDateIndex == index ? .royalBlue : .black)
                                                        }
                                                        .padding(.vertical, 8)
                                                        .padding(.horizontal, 12)
                                                        .background(
                                                            RoundedRectangle(cornerRadius: 8)
                                                                .fill(dateFilterService.selectedDateIndex == index ? Color.royalBlue.opacity(0.1) : Color.clear)
                                                        )
                                                    }
                                                    .buttonStyle(PlainButtonStyle())
                                                }
                                            }
                                            .padding(.horizontal, 4)
                                        }
                                    }
                                    
                                    // Location Filter
                                    VStack(alignment: .leading, spacing: 8) {
                                        Text("Location")
                                            .font(.system(size: 14, weight: .medium, design: .default))
                                            .foregroundColor(.black)
                                        
                                        Button(action: {
                                            showLocationSheet = true
                                        }) {
                                            HStack {
                                                Image(systemName: "location")
                                                    .foregroundColor(.royalBlue)
                                                    .font(.system(size: 14))
                                                
                                                VStack(alignment: .leading, spacing: 2) {
                                                    Text(locationText)
                                                        .font(.system(size: 14, weight: .medium, design: .default))
                                                        .foregroundColor(.black)
                                                        .lineLimit(1)
                                                    
                                                    Text("Within \(radius) km")
                                                        .font(.system(size: 12, weight: .regular, design: .default))
                                                        .foregroundColor(.gray)
                                                }
                                                
                                                Spacer()
                                                
                                                Image(systemName: "chevron.right")
                                                    .foregroundColor(.gray)
                                                    .font(.system(size: 12))
                                            }
                                            .padding(.horizontal, 12)
                                            .padding(.vertical, 8)
                                            .background(Color.gray.opacity(0.1))
                                            .cornerRadius(8)
                                        }
                                        .buttonStyle(PlainButtonStyle())
                                    }
                                    
                                    // Clear Filters Button
                                    if sportFilterService.selectedSport != "All Sports" || dateFilterService.selectedDateIndex != 0 || locationText != "Surrey, British Columbia" {
                                        Button(action: {
                                            sportFilterService.clearSportFilter()
                                            dateFilterService.clearDateFilter()
                                            locationText = "Surrey, British Columbia"
                                            radius = 40
                                            Task {
                                                await authManager.refreshAllEventLists()
                                            }
                                        }) {
                                            Text("Clear All Filters")
                                                .font(.system(size: 14, weight: .medium, design: .default))
                                                .foregroundColor(.red)
                                                .padding(.horizontal, 16)
                                                .padding(.vertical, 8)
                                                .background(Color.red.opacity(0.1))
                                                .cornerRadius(8)
                                        }
                                    }
                                }
                                .padding(.horizontal, 16)
                                .padding(.vertical, 16)
                                .background(Color.white)
                                .cornerRadius(12)
                                .overlay(
                                    RoundedRectangle(cornerRadius: 12)
                                        .stroke(Color.gray.opacity(0.2), lineWidth: 1)
                                )
                                .transition(.asymmetric(
                                    insertion: .scale(scale: 0.95).combined(with: .opacity),
                                    removal: .scale(scale: 0.95).combined(with: .opacity)
                                ))
                            }
                        }
                    }
                    .padding(.horizontal, 20)
                    .padding(.top, 20)
                    
                    // Events List
                    if isFiltering {
                        Spacer()
                        ProgressView("Filtering events...")
                            .foregroundColor(.gray)
                        Spacer()
                    } else if authManager.userEvents.isEmpty {
                        Spacer()
                        VStack(spacing: 16) {
                            Image(systemName: "sportscourt")
                                .font(.system(size: 48))
                                .foregroundColor(.gray)
                            
                            Text("No events found")
                                .font(.system(size: 18, weight: .medium, design: .default))
                                .foregroundColor(.gray)
                            
                            Text("Try adjusting your filters or search terms")
                                .font(.system(size: 14, weight: .regular, design: .default))
                                .foregroundColor(.gray.opacity(0.7))
                                .multilineTextAlignment(.center)
                        }
                        Spacer()
                    } else {
                        ScrollView {
                            LazyVGrid(columns: [
                                GridItem(.flexible())
                            ], spacing: 16) {
                                ForEach(authManager.userEvents) { event in
                                    ExploreEventCard(event: event) {
                                        selectedEvent = event
                                        navigateToEventDetail = true
                                    }
                                }
                            }
                            .padding(.horizontal, 20)
                            .padding(.top, 20)
                        }
                    }
                }
            }
        }
        .sheet(isPresented: $showLocationSheet) {
            LocationSearchView(locationText: $locationText, radius: $radius, distances: distances) {
                Task {
                    await filterByLocation(locationText, radius: radius)
                }
            }
        }
        .sheet(isPresented: $showSportSheet) {
            SportSearchView(selectedSport: $sportFilterService.selectedSport) {
                Task {
                    await filterBySport(sportFilterService.selectedSport)
                }
            }
        }
        .navigationDestination(isPresented: $navigateToEventDetail) {
            if let selectedEvent = selectedEvent {
                EventDetailView(event: selectedEvent)
            }
        }
        .navigationBarHidden(true)
        .onAppear {
            // Connect filter services to AuthManager
            sportFilterService.setAuthManager(authManager)
            dateFilterService.setAuthManager(authManager)
            locationFilterService.setAuthManager(authManager)
            
            Task {
                await authManager.refreshAllEventLists()
            }
        }
        .refreshable {
            await authManager.refreshAllEventLists()
        }
    
    // MARK: - Helper Functions
    
    private func performSearch() async {
        isSearching = true
        
        // Create search filters
        let filters = SearchFilters(
            sportType: sportFilterService.selectedSport,
            date: dateFilterService.selectedDateIndex == 0 ? nil : getDateForIndex(dateFilterService.selectedDateIndex),
            location: locationText,
            radius: radius
        )
        
        if searchText.isEmpty {
            await authManager.searchWithAllFilters(searchText: "", filters: filters)
        } else {
            await authManager.performLiveSearch(searchText: searchText, filters: filters)
        }
        
        isSearching = false
    }
    
    private func filterByDate(_ index: Int) async {
        isFiltering = true
        
        let filters = SearchFilters(
            sportType: sportFilterService.selectedSport,
            date: index == 0 ? nil : getDateForIndex(index),
            location: locationText,
            radius: radius
        )
        
        await authManager.searchWithAllFilters(searchText: searchText, filters: filters)
        
        isFiltering = false
    }
    
    private func filterBySport(_ sportType: String) async {
        isFiltering = true
        
        let filters = SearchFilters(
            sportType: sportType,
            date: dateFilterService.selectedDateIndex == 0 ? nil : getDateForIndex(dateFilterService.selectedDateIndex),
            location: locationText,
            radius: radius
        )
        
        await authManager.searchWithAllFilters(searchText: searchText, filters: filters)
        
        isFiltering = false
    }
    
    private func filterByLocation(_ location: String, radius: Int) async {
        isFiltering = true
        
        let filters = SearchFilters(
            sportType: sportFilterService.selectedSport,
            date: dateFilterService.selectedDateIndex == 0 ? nil : getDateForIndex(dateFilterService.selectedDateIndex),
            location: location,
            radius: radius
        )
        
        await authManager.searchWithAllFilters(searchText: searchText, filters: filters)
        
        isFiltering = false
    }
    
    // Helper function to get date for index
    private func getDateForIndex(_ index: Int) -> Date {
        let calendar = Calendar.current
        let today = Date()
        return calendar.date(byAdding: .day, value: index, to: today) ?? today
    }
}

struct ExploreEventCard: View {
    let event: Event
    let action: () -> Void
    
    var body: some View {
        Button(action: action) {
            VStack(alignment: .leading, spacing: 12) {
                // Event image
                RoundedRectangle(cornerRadius: 12)
                    .fill(Color.gray.opacity(0.2))
                    .frame(height: 160)
                    .overlay(
                        Image(systemName: "sportscourt")
                            .foregroundColor(.gray)
                            .font(.system(size: 40))
                    )
                
                VStack(alignment: .leading, spacing: 8) {
                    HStack {
                        Text(event.title)
                            .font(.system(size: 16, weight: .bold, design: .default))
                            .foregroundColor(.black)
                            .multilineTextAlignment(.leading)
                        
                        Spacer()
                        
                        // Status badge
                        Text(event.status.displayName)
                            .font(.system(size: 12, weight: .medium, design: .default))
                            .foregroundColor(.white)
                            .padding(.horizontal, 8)
                            .padding(.vertical, 4)
                            .background(event.status.color)
                            .cornerRadius(12)
                    }
                    
                    HStack {
                        Image(systemName: "calendar")
                            .foregroundColor(.royalBlue)
                            .font(.caption)
                        
                        Text(event.formattedDateTime)
                            .font(.system(size: 14, weight: .regular, design: .default))
                            .foregroundColor(.gray)
                        
                        Spacer()
                        
                        HStack(spacing: 4) {
                            Image(systemName: "clock")
                                .foregroundColor(.royalBlue)
                                .font(.caption)
                            
                            Text("\(event.durationMinutes) min")
                                .font(.system(size: 14, weight: .medium, design: .default))
                                .foregroundColor(.royalBlue)
                        }
                    }
                    
                    HStack {
                        Image(systemName: "location")
                            .foregroundColor(.royalBlue)
                            .font(.caption)
                        
                        Text(event.location)
                            .font(.system(size: 14, weight: .regular, design: .default))
                            .foregroundColor(.gray)
                            .lineLimit(1)
                    }
                    
                    HStack {
                        Image(systemName: "person.2")
                            .foregroundColor(.royalBlue)
                            .font(.caption)
                        
                        Text("\(event.currentPlayers)/\(event.maxPlayers) players")
                            .font(.system(size: 14, weight: .regular, design: .default))
                            .foregroundColor(.gray)
                        
                        Spacer()
                        
                        Text(event.sportType)
                            .font(.system(size: 12, weight: .medium, design: .default))
                            .foregroundColor(.royalBlue)
                            .padding(.horizontal, 8)
                            .padding(.vertical, 4)
                            .background(Color.royalBlue.opacity(0.1))
                            .cornerRadius(8)
                    }
                }
                .padding(.horizontal, 12)
                .padding(.bottom, 12)
            }
            .background(Color.white)
            .cornerRadius(12)
            .shadow(color: .black.opacity(0.1), radius: 4, x: 0, y: 2)
        }
        .buttonStyle(PlainButtonStyle())
    }
}

// Sample events for preview (will be replaced with real events from database)
let sampleEvents: [Event] = [
    Event(
        id: "sample-1",
        title: "UBC Badminton Centre",
        description: "Join us for a fun badminton session!",
        sportType: "Badminton",
        location: "Vancouver, BC",
        latitude: nil,
        longitude: nil,
        dateTime: Date().addingTimeInterval(3600), // 1 hour from now
        durationMinutes: 120,
        maxPlayers: 8,
        currentPlayers: 6,
        skillLevel: 5,
        hostId: "sample-host-1",
        status: .active,
        createdAt: Date(),
        updatedAt: Date()
    ),
    Event(
        id: "sample-2",
        title: "Richmond Ace Badminton",
        description: "Advanced level badminton game",
        sportType: "Badminton",
        location: "Richmond, BC",
        latitude: nil,
        longitude: nil,
        dateTime: Date().addingTimeInterval(7200), // 2 hours from now
        durationMinutes: 120,
        maxPlayers: 8,
        currentPlayers: 8,
        skillLevel: 7,
        hostId: "sample-host-2",
        status: .active,
        createdAt: Date(),
        updatedAt: Date()
    ),
    Event(
        id: "sample-3",
        title: "Community Tennis",
        description: "All levels welcome!",
        sportType: "Tennis",
        location: "Stanley Park, Vancouver",
        latitude: nil,
        longitude: nil,
        dateTime: Date().addingTimeInterval(10800), // 3 hours from now
        durationMinutes: 90,
        maxPlayers: 4,
        currentPlayers: 3,
        skillLevel: 4,
        hostId: "sample-host-3",
        status: .active,
        createdAt: Date(),
        updatedAt: Date()
    )
]

struct ChangeLocationView: View {
    @Binding var locationText: String
    @Binding var radius: Int
    let distances: [Int]
    let onApply: () -> Void
    @Environment(\.dismiss) private var dismiss
    @EnvironmentObject var authManager: AuthManager
    @State private var searchQuery = ""
    
    var body: some View {
        VStack(spacing: 0) {
            // Header
            HStack {
                Spacer()
                Text("Change location")
                    .font(.system(size: 22, weight: .bold))
                    .foregroundColor(.black)
                Spacer()
                Button(action: { dismiss() }) {
                    Image(systemName: "xmark")
                        .font(.title2)
                        .foregroundColor(.gray)
                }
            }
            .padding(.top, 16)
            .padding(.bottom, 8)
            .padding(.horizontal, 16)
            Divider()
            // Search field
            HStack {
                Image(systemName: "magnifyingglass")
                    .foregroundColor(.gray)
                    .font(.system(size: 16))
                
                TextField("Search by city, neighborhood or ZIP code.", text: $searchQuery)
                    .font(.system(size: 16, weight: .regular, design: .default))
                    .foregroundColor(.black)
                    .accentColor(.royalBlue)
                    .tint(.gray.opacity(0.9))
                                         .onChange(of: searchQuery) { _, newValue in
                        if newValue.isEmpty {
                            locationText = searchQuery
                        }
                    }
                
                if !searchQuery.isEmpty {
                    Button(action: { searchQuery = "" }) {
                        Image(systemName: "xmark.circle.fill")
                            .foregroundColor(.gray)
                            .font(.system(size: 16))
                    }
                }
            }
            .padding(.vertical, 10)
            .padding(.horizontal, 8)
            .background(Color.gray.opacity(0.1))
            .cornerRadius(12)
            .padding(.horizontal, 16)
            .padding(.top, 12)
            // Location box
            VStack(alignment: .leading, spacing: 2) {
                Text("Location")
                    .font(.system(size: 13, weight: .regular))
                    .foregroundColor(.gray)
                HStack {
                    Image(systemName: "mappin.and.ellipse")
                        .foregroundColor(.gray)
                    Text(locationText)
                        .font(.system(size: 16, weight: .medium))
                        .foregroundColor(.black)
                    Spacer()
                }
            }
            .padding()
            .background(Color.white)
            .cornerRadius(12)
            .overlay(
                RoundedRectangle(cornerRadius: 12)
                    .stroke(Color.gray.opacity(0.2), lineWidth: 1)
            )
            .padding(.horizontal, 16)
            .padding(.top, 12)
            // Radius box
            VStack(alignment: .leading, spacing: 2) {
                Text("Radius")
                    .font(.system(size: 13, weight: .regular))
                    .foregroundColor(.gray)
                Menu {
                    ForEach(distances, id: \.self) { d in
                        Button("\(d) kilometers") { radius = d }
                    }
                } label: {
                    HStack {
                        Text("\(radius) kilometers")
                            .font(.system(size: 16, weight: .medium))
                            .foregroundColor(.black)
                        Spacer()
                        Image(systemName: "chevron.down")
                            .foregroundColor(.gray)
                    }
                    .padding(.vertical, 10)
                    .padding(.horizontal, 8)
                }
            }
            .padding()
            .background(Color.white)
            .cornerRadius(12)
            .overlay(
                RoundedRectangle(cornerRadius: 12)
                    .stroke(Color.gray.opacity(0.2), lineWidth: 1)
            )
            .padding(.horizontal, 16)
            .padding(.top, 12)
            // Current location and info icons
            HStack {
                Spacer()
                Button(action: {
                    // TODO: Use current location
                }) {
                    Image(systemName: "location.fill")
                        .font(.title3)
                        .foregroundColor(.gray)
                }
                Spacer()
                Button(action: {
                    // TODO: Show info
                }) {
                    Image(systemName: "info.circle")
                        .font(.title3)
                        .foregroundColor(.gray)
                }
                Spacer()
            }
            .padding(.top, 24)
            Spacer()
            // Apply button
            HStack {
                Spacer()
                Button(action: {
                    locationText = searchQuery.isEmpty ? locationText : searchQuery
                    Task {
                        await authManager.filterByLocation(locationText, radiusKm: radius)
                    }
                    onApply()
                }) {
                    Text("Apply")
                        .font(.system(size: 18, weight: .semibold))
                        .foregroundColor(.white)
                        .padding(.horizontal, 32)
                        .padding(.vertical, 12)
                        .background(Color.royalBlue)
                        .cornerRadius(12)
                }
                .padding(.bottom, 24)
                .padding(.trailing, 16)
            }
        }
        .background(Color(.systemGroupedBackground))
        .ignoresSafeArea()
    }
}

#Preview {
    ExploreView(selectedTab: .constant(0))
        .environmentObject(AuthManager())
} 
 
 