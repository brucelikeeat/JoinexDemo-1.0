//
//  HostView.swift
//  JoinexDemo 1.0
//
//  Created by Molin Liu on 2025/7/26.
//

import SwiftUI

struct HostView: View {
    @Binding var selectedTab: Int
    @EnvironmentObject var authManager: AuthManager
    @State private var navigateToCreateEvent = false
    @State private var navigateToEditEvent = false
    @State private var selectedEvent: Event? = nil
    @State private var showCancelAlert = false
    @State private var eventToCancel: Event? = nil
    @State private var showSuccessAlert = false
    @State private var showErrorAlert = false
    @State private var alertMessage = ""
    
    var body: some View {
        NavigationStack {
            ZStack {
                Color.white
                    .ignoresSafeArea(.all, edges: .top)
                
                VStack(spacing: 0) {
                    // Header
                    HStack {
                        Image("logo1")
                            .resizable()
                            .aspectRatio(contentMode: .fit)
                            .frame(width: 24, height: 24)
                        
                        Text("Host")
                            .font(.system(size: 24, weight: .bold, design: .default))
                            .foregroundColor(.black)
                        
                        Spacer()
                        
                        Button(action: {
                            selectedTab = 4
                        }) {
                            if let urlString = authManager.profile?.avatar_url, let url = URL(string: urlString) {
                                AsyncImage(url: url) { image in
                                    image
                                        .resizable()
                                        .scaledToFill()
                                        .frame(width: 40, height: 40)
                                        .clipShape(Circle())
                                } placeholder: {
                                    Circle()
                                        .fill(Color.royalBlue)
                                        .frame(width: 40, height: 40)
                                        .overlay(
                                            Text(String(authManager.profile?.username.prefix(1) ?? "U"))
                                                .font(.system(size: 16, weight: .bold, design: .default))
                                                .foregroundColor(.white)
                                        )
                                }
                            } else {
                                Circle()
                                    .fill(Color.royalBlue)
                                    .frame(width: 40, height: 40)
                                    .overlay(
                                        Text(String(authManager.profile?.username.prefix(1) ?? "U"))
                                            .font(.system(size: 16, weight: .bold, design: .default))
                                            .foregroundColor(.white)
                                    )
                            }
                        }
                    }
                    .padding(.horizontal, 20)
                    .padding(.top, 10)
                    
                    // Main content area
                    VStack(spacing: 0) {
                        // Scrollable events section
                        ScrollView {
                            VStack(spacing: 20) {
                                // Hosted Events Section
                                VStack(alignment: .leading, spacing: 16) {
                                    Text("Your Hosted Events")
                                        .font(.system(size: 20, weight: .bold, design: .default))
                                        .foregroundColor(.black)
                                        .padding(.horizontal, 20)
                                    
                                    // Event cards
                                    VStack(spacing: 12) {
                                        if authManager.hostedEvents.isEmpty {
                                            Text("No hosted events yet")
                                                .font(.system(size: 16, weight: .medium, design: .default))
                                                .foregroundColor(.gray)
                                                .padding(.vertical, 40)
                                        } else {
                                            ForEach(authManager.hostedEvents) { event in
                                                HostedEventCard(
                                                    title: event.title,
                                                    date: event.formattedDateTime,
                                                    location: event.location,
                                                    duration: "\(event.durationMinutes) min",
                                                    imageName: "sportscourt",
                                                    status: event.status.displayName.lowercased(),
                                                    statusColor: event.status.color,
                                                    playersCount: event.currentPlayers,
                                                    maxPlayers: event.maxPlayers,
                                                    canCancel: event.status == .active,
                                                    onCancel: { eventToCancel = event; showCancelAlert = true },
                                                    action: { selectedEvent = event; navigateToEditEvent = true }
                                                )
                                            }
                                        }
                                    }
                                    .padding(.horizontal, 20)
                                }
                                
                                Spacer().frame(height: 20)
                            }
                        }
                        
                        // Fixed bottom section with statistics and create button
                        VStack(spacing: 16) {
                            // Statistics Section
                            VStack(alignment: .leading, spacing: 8) {
                                Text("Hosting Statistics")
                                    .font(.system(size: 18, weight: .bold, design: .default))
                                    .foregroundColor(.black)
                                    .padding(.horizontal, 20)
                                HStack(spacing: 12) {
                                    StatCard(title: "Events Hosted", value: "\(authManager.hostedEvents.count)", icon: "calendar", color: .royalBlue)
                                    StatCard(title: "Total Players", value: "\(authManager.hostedEvents.reduce(0) { $0 + $1.currentPlayers })", icon: "person.3", color: .green)
                                    StatCard(title: "Active Events", value: "\(authManager.hostedEvents.filter { $0.status == .active }.count)", icon: "star", color: .orange)
                                }
                                .padding(.horizontal, 20)
                            }
                            
                            // Create Event Button
                            AnimatedButton(title: "Create New Event") {
                                navigateToCreateEvent = true
                            }
                            .padding(.horizontal, 20)
                            .padding(.bottom, 24)
                        }
                        .background(Color.white)
                    }
                }
                .alert("Cancel Event", isPresented: $showCancelAlert) {
                    Button("Cancel Event", role: .destructive) {
                        if let event = eventToCancel {
                            Task {
                                print("HostView: Attempting to cancel event: \(event.title)")
                                let success = await authManager.cancelEvent(id: event.id)
                                if success {
                                    print("HostView: Event cancelled successfully")
                                    // Refresh the events list immediately
                                    await authManager.refreshAllEventLists()
                                    // Show success feedback
                                    await MainActor.run {
                                        alertMessage = "Event '\(event.title)' has been cancelled successfully."
                                        showSuccessAlert = true
                                    }
                                } else {
                                    print("HostView: Failed to cancel event")
                                    await MainActor.run {
                                        alertMessage = authManager.errorMessage ?? "Failed to cancel event"
                                        showErrorAlert = true
                                    }
                                }
                            }
                        }
                    }
                    Button("Keep Event", role: .cancel) {
                        eventToCancel = nil
                    }
                } message: {
                    Text("Are you sure you want to cancel '\(eventToCancel?.title ?? "this event")'? This action cannot be undone.")
                }
                .alert("Success", isPresented: $showSuccessAlert) {
                    Button("OK") {
                        showSuccessAlert = false
                        eventToCancel = nil
                    }
                } message: {
                    Text(alertMessage)
                }
                .alert("Error", isPresented: $showErrorAlert) {
                    Button("OK") {
                        showErrorAlert = false
                        eventToCancel = nil
                    }
                } message: {
                    Text(alertMessage)
                }
            }
            .navigationDestination(isPresented: $navigateToCreateEvent) {
                CreateEventView()
                    .environmentObject(authManager)
            }
            .navigationDestination(isPresented: $navigateToEditEvent) {
                if let event = selectedEvent {
                    EditEventView(event: event)
                        .environmentObject(authManager)
                }
            }
            .navigationBarHidden(true)
            .onAppear {
                Task {
                    await authManager.refreshAllEventLists()
                }
            }
            .refreshable {
                await authManager.refreshAllEventLists()
            }
        }
}

struct HostedEventCard: View {
    let title: String
    let date: String
    let location: String
    let duration: String
    let imageName: String
    let status: String
    let statusColor: Color
    let playersCount: Int
    let maxPlayers: Int
    let canCancel: Bool
    let onCancel: () -> Void
    let action: () -> Void
    
    var body: some View {
        VStack(spacing: 0) {
            Button(action: action) {
                HStack(spacing: 12) {
                    // Event image
                    RoundedRectangle(cornerRadius: 8)
                        .fill(Color.gray.opacity(0.2))
                        .frame(width: 80, height: 80)
                        .overlay(
                            Image(systemName: "sportscourt")
                                .foregroundColor(.gray)
                        )
                    VStack(alignment: .leading, spacing: 4) {
                        Text(title)
                            .font(.system(size: 16, weight: .bold, design: .default))
                            .foregroundColor(.black)
                            .multilineTextAlignment(.leading)
                        HStack {
                            Image(systemName: "calendar")
                                .foregroundColor(.blue)
                                .font(.caption)
                            Text(date)
                                .font(.system(size: 14, weight: .regular, design: .default))
                                .foregroundColor(.gray)
                        }
                        HStack {
                            Image(systemName: "location")
                                .foregroundColor(.blue)
                                .font(.caption)
                            Text(location)
                                .font(.system(size: 14, weight: .regular, design: .default))
                                .foregroundColor(.gray)
                        }
                        HStack {
                            Image(systemName: "person.2")
                                .foregroundColor(.blue)
                                .font(.caption)
                            Text("\(playersCount) / \(maxPlayers) players")
                                .font(.system(size: 14, weight: .regular, design: .default))
                                .foregroundColor(.gray)
                        }
                        
                        HStack {
                            Image(systemName: "clock")
                                .foregroundColor(.blue)
                                .font(.caption)
                            Text(duration)
                                .font(.system(size: 14, weight: .medium, design: .default))
                                .foregroundColor(.blue)
                        }
                    }
                    Spacer()
                    // Status badge
                    Text(status)
                        .font(.system(size: 12, weight: .medium, design: .default))
                        .foregroundColor(.white)
                        .padding(.horizontal, 8)
                        .padding(.vertical, 4)
                        .background(statusColor)
                        .cornerRadius(12)
                }
                .padding()
                .background(Color.white)
                .cornerRadius(12)
                
            }
            .buttonStyle(PlainButtonStyle())
            if canCancel {
                Button(action: onCancel) {
                    Text("Cancel Event")
                        .font(.system(size: 14, weight: .medium))
                        .foregroundColor(.red)
                        .padding(.vertical, 8)
                        .frame(maxWidth: .infinity)
                }
                .background(Color.red.opacity(0.05))
                .cornerRadius(12)
                .padding(.horizontal, 8)
                .padding(.top, 4)
            }
        }
    }
}

struct StatCard: View {
    let title: String
    let value: String
    let icon: String
    let color: Color
    
    var body: some View {
        VStack(spacing: 8) {
            Image(systemName: icon)
                .foregroundColor(color)
                .font(.title2)
            
            Text(value)
                .font(.system(size: 24, weight: .bold, design: .default))
                .foregroundColor(.black)
            
            Text(title)
                .font(.system(size: 12, weight: .regular, design: .default))
                .foregroundColor(.gray)
                .multilineTextAlignment(.center)
        }
        .frame(maxWidth: .infinity)
        .padding()
        .background(Color.white)
        .cornerRadius(12)

    }
}

#Preview {
    HostView(selectedTab: .constant(0))
        .environmentObject(AuthManager())
} 
 
 